#!/bin/bash
#
# putiodl - put.io cli downloader
#
# Copyright (C) 2013 Neal <neal@ineal.me>
#
# Dependencies: jq, curl
#
# Make sure ~/.putiodl exists and contains your put.io OAuth token.
#

info ()  { printf "$*\n"; }
warn ()  { printf "[\033[00;33mWARN\033[0m] $*\n" >&2; }
error () { printf "[\033[00;31mERROR\033[0m] $*\n" >&2; }
fatal () { printf "[\033[00;31mERROR\033[0m] $*\n" >&2; exit 1; }

OAUTH_TOKEN=$(cat ~/.putiodl)

[[ ${OAUTH_TOKEN} == "" ]] && fatal "Make sure ~/.putiodl exists and contains your put.io OAuth token."

usage() {
	cat << EOF
usage: putiodl [options]...

   -l    List all files
   -i    File ID
   -o    Output file location
   -n    Get file info
   -z    Download zip
EOF
	exit 255
}

while getopts "hli:o:nz" OPTION; do
	case ${OPTION} in
		l)
			FILEID="list"
			INFO_ONLY=true
			;;
		i)
			FILEID="${OPTARG}"
			;;
		o)
			OUTFILELOC="${OPTARG}"
			;;
		n)
			INFO_ONLY=true
			;;
		z)
			DLZIP=true
			;;
		?)
			usage
			;;
	esac
done

test ! $(which curl) && fatal "curl not found"
test ! $(which jq) && fatal "jq not found"

[[ ${FILEID} == "" ]] && usage

FILEINFO=$(curl -sH 'Accept: application/json' "https://api.put.io/v2/files/${FILEID}?oauth_token=${OAUTH_TOKEN}")

if [[ ${INFO_ONLY} == true ]]; then
	echo "${FILEINFO}"
	exit 0
fi

[[ $(echo ${FILEINFO} | jq ".status") != "\"OK\"" ]] && fatal "Invalid File ID."

[[ ${DLZIP} == true ]] && DL="zip" || DL="download"

if [[ ${OUTFILELOC} == "" ]]; then
	OUTFILELOC=$(echo ${FILEINFO} | jq -r '.file.name')
	[[ ${DLZIP} == true ]] && OUTFILELOC="${OUTFILELOC}.zip"
fi


info "Downloading ${OUTFILELOC}"
if test ! $(which wget); then
	curl -# --location-trusted "https://api.put.io/v2/files/${FILEID}/${DL}?oauth_token=${OAUTH_TOKEN}" -o "${OUTFILELOC}" -C -
else
	wget -c --config /dev/null "https://api.put.io/v2/files/${FILEID}/${DL}?oauth_token=${OAUTH_TOKEN}" -O "${OUTFILELOC}"
fi

exit 0
